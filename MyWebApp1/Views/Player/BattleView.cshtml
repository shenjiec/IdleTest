@model MyWebApp1.Models.BattleValue
@{
    ViewBag.Title = "Battle";
    Layout = "~/Views/Shared/_LayoutPlayer.cshtml";
}

<div class="container mt-5">
    <div class="row">
        <!-- 左側區域 -->
        <div class="col-md-4">
            <div class="card shadow-lg mb-4">
                <div class="card-body">
                    <h2 class="text-danger mb-3">階段: @Model.CurrentStage.ToString("N0")</h2>
                    <h5 class="text-muted mb-4">@Model.MonsterName</h5>
                    <!-- HP Progress Bar -->
                    <div class="d-flex align-items-center mb-3">
                        <h5 class="text-danger mb-0 mr-3">血量</h5>
                        <div class="progress" style="margin-left:10px; border-radius: 10px; height: 20px; width: 39%; position: relative;">
                            <div id="ProgressHP" class="progress-bar bg-danger" role="progressbar" style="width: 100%;"
                                 aria-valuenow="@Model.StageHP" aria-valuemin="0" aria-valuemax="@Model.StageHP">
                            </div>
                            <span id="progressPercentage" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-weight: bold;">
                                100%
                            </span>
                        </div>
                    </div>
                    <div>
                        <h6>迴避值: <span class="text-danger">@Model.StageDefense1.ToString("N0")</span></h6>
                        <h6>抗暴值: <span class="text-danger">@Model.StageDefense2.ToString("N0")</span></h6>
                        <h6>精華碎片掉落: <span class="text-danger">@Model.StageEssence</span></h6>
                    </div>
                </div>
            </div>

            <div class="card shadow-lg mb-4">
                <div class="card-body">
                    <h2 class="text-primary mb-3">等級: @Model.PlayerLevel</h2>
                    <h5 class="text-muted mb-4">@Model.PlayerName</h5>
                    <!-- Energy Progress Bar -->
                    <div class="d-flex align-items-center mb-3">
                        <h5 class="text-primary mb-0 mr-3">能量</h5>
                        <div style="margin-left: 10px; border-radius: 10px; height: 20px; width: 39%; background-color: #e9ecef;">
                            <div id="ProgressEnergy" class="progress-bar bg-primary" role="progressbar" style="width: 0%; height: 20px; border-radius: 10px;"
                                 aria-valuenow="0" aria-valuemin="0" aria-valuemax="50"></div>
                        </div>
                    </div>
                    <div>
                        <h6>命中值: <span class="text-primary">@Model.PlayerHit.ToString("N0")</span></h6>
                        <h6>暴擊值: <span class="text-primary">@Model.PlayerCrit.ToString("N0")</span></h6>
                        <h6>
                            精華碎片: <span class="text-primary">@Model.PlayerEssence.ToString("N0")</span>&nbsp;
                            @if (@Model.ShowMessage != null)
                            {
                                <span id="message-alert" class="mx-auto text-success">
                                    @Model.ShowMessage
                                </span>
                            }
                        </h6>
                        <h6>水晶碎片: <span class="text-primary">@Model.PlayerCrystal.ToString("N0")</span></h6>
                    </div>
                </div>
            </div>
        </div>

        <!-- 右側區域 -->
        <div class="col-md-4">
            <div class="card shadow-lg mb-3">
                <div class="card-body">
                    <h5 class="text-muted mb-4">戰鬥狀態</h5>
                    <div id="hitMessage"></div>
                </div>
            </div>
        </div>
    </div>
</div>



<script>
    //初始化變數
    const modelData = @Html.Raw(Json.Encode(Model));
    let stageHP = modelData.StageHP;
    const progressBarHP = document.getElementById("ProgressHP");
    const progressBarEnergy = document.getElementById("ProgressEnergy");
    let hitMessages = []; //訊息存儲陣列
    let hitTimes = 0; //總打擊次數
    let energy = 0;
    const maxEnergy = 100;

    //設置血量進度條最大值
    progressBarHP.setAttribute("aria-valuemax", stageHP);

    //計算命中和傷害
    function calculateDamage() {
        //const now = new Date();
        //const formattedDate = String(now.getHours()).padStart(2, '0') + ':' +
        //                      String(now.getMinutes()).padStart(2, '0') + ':' +
        //                      String(now.getSeconds()).padStart(2, '0');

        //計算命中率
        const hitChance = Math.max(0, Math.min(modelData.PlayerHit - modelData.StageDefense1, 100));
        const randomHit = Math.random() * 100;

        hitTimes++;

        //判斷是否命中
        if (randomHit <= hitChance) {
            //計算暴擊機率
            const critChance = Math.max(0, Math.min(modelData.PlayerCrit - modelData.StageDefense2, 100));
            const randomCrit = Math.random() * 100;

            //傷害浮動
            let x = Math.random() * 0.1 + 0.900;

            //判斷是否暴擊
            if (randomCrit <= critChance) {

                const damage = Math.ceil(modelData.PlayerDamageCrit * x);
                hitMessages.push(hitTimes + ' - 造成 ' + damage.toLocaleString('en-US') + ' 點暴擊傷害');

                return damage;
            } else {

                const damage = Math.ceil(modelData.PlayerDamage * x);
                hitMessages.push(hitTimes + ' - 造成 ' + damage.toLocaleString('en-US') + ' 點傷害');

                return damage;
            }
        } else {

            hitMessages.push(hitTimes + ' - 未命中');

            return 0;
        }
    }

    //更新血量進度條
    function updateHP() {
        const progressPercentHP = (stageHP / modelData.StageHP) * 100;
        progressBarHP.style.width = progressPercentHP + "%";
        progressBarHP.setAttribute("aria-valuenow", stageHP);
        const progressPercentage = document.getElementById("progressPercentage");
        progressPercentage.innerText = Math.round(progressPercentHP) + "%";
    }


    //更新能量進度條
    function updateEnergy() {
        const energyPercent = (energy / maxEnergy) * 100;
        progressBarEnergy.style.width = energyPercent + "%";
        progressBarEnergy.setAttribute("aria-valuenow", energy);
    }

    function updateHitMessage() {
        //如果訊息數量超過15，移除最舊的一筆
        if (hitMessages.length > 15) {
            hitMessages.shift();
        }

        //更新顯示訊息
        displayHitMessages();
    }

    //顯示訊息
    function displayHitMessages() {
        const hitMessageElement = document.getElementById("hitMessage");
        hitMessageElement.innerHTML = ''; //清空當前顯示的內容

        hitMessages.slice().reverse().forEach(message => {
            const messageDiv = document.createElement("div");
            messageDiv.textContent = message;

            if (message.includes('暴擊')) {
                messageDiv.classList.add('text-danger');
            } else if (message.includes('傷害')) {
                messageDiv.classList.add('text-success');
            } else if (message.includes('未命中')) {
                messageDiv.classList.add('text-secondary');
            }

            //將訊息元素添加到 DOM 中
            hitMessageElement.appendChild(messageDiv);
        });
    }

    //主計時器，定時器每 10ms 執行
    const intervalId = setInterval(function () {
        //增加能量並更新進度條
        energy++;
        updateEnergy();

        //當能量達到最大值時，進行暴擊計算並扣除血量
        if (energy >= maxEnergy) {
            const damage = calculateDamage();
            stageHP -= damage;

            //如果血量小於等於 0，停止計時並跳轉
            if (stageHP <= 0) {
                stageHP = 0; //保證血量不會小於 0
                clearInterval(intervalId); //停止計時器
                window.location.href = '@Url.Action("BattleFinish", "Player")'; //轉跳到結束頁面
            }

            updateHP(); //更新血量進度條
            energy = 0; //重置能量
        }

        updateHitMessage();

    }, 10); //每 10 毫秒執行一次

    setTimeout(function () {
        var alertElement = document.getElementById("message-alert");
        if (alertElement) {
            alertElement.style.display = "none"; //2秒後隱藏訊息
        }
    }, 2000);
</script>